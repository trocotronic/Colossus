#/************************************************************************
#*   $Id: Makefile.in,v 1.12 2005-10-22 19:36:56 Trocotronic Exp $
#*/

CC=@CC@
INCLUDEDIR=../include
IRCDLIBS=@IRCDLIBS@
CRYPTOLIB=@CRYPTOLIB@
XCFLAGS=@CFLAGS@
OPENSSLPATH=@OPENSSLPATH@
CFLAGS=-I$(INCLUDEDIR) $(XCFLAGS) @LDFLAGS@

SHELL=/bin/sh
SUBDIRS=src
INSTALL=@INSTALL@
RM=@RM@
CP=@CP@
TOUCH=@TOUCH@
all:	build

MAKEARGS =	'CFLAGS=${CFLAGS}' 'CC=${CC}' 'IRCDLIBS=${IRCDLIBS}' \
		'LDFLAGS=${LDFLAGS}' 'INSTALL=${INSTALL}' \
		'INCLUDEDIR=${INCLUDEDIR}' 'CRYPTOLIB=${CRYPTOLIB}' \
		'RM=${RM}' 'CP=${CP}' 'TOUCH=${TOUCH}'

modulo:
	cd src; ${MAKE} ${MAKEARGS} 'FUENTE=$(FUENTE)' 'EXLIBS=${EXLIBS}' modulo
	$(CP) src/modulos/$(FUENTE).so modulos/$(FUENTE).so

server:
build:
	-@if [ ! -f include/setup.h ] ; then \
		echo "No parece que hayas ejecutado la configuracion..."; \
		sh Config; \
	fi
	@for i in $(SUBDIRS); do \
		echo "Compilando $$i";\
		( cd $$i; ${MAKE} ${MAKEARGS} build; ) \
	done
	@echo ' __________________________________________________ '
	@echo '| Compilación terminada.                           |'
	@echo '|__________________________________________________|'

clean:
	$(RM) -f *~ \#* core *.orig include/*.orig
	@for i in $(SUBDIRS); do \
		echo "Limpiando $$i";\
		( cd $$i; ${MAKE} ${MAKEARGS} clean; ) \
	done
	-@if [ -f include/setup.h ] ; then \
	  echo "Para resetear la instalacion, borra include/setup.h" ; \
	fi

cleandir: clean
	$(RM) -rf include/setup.h Makefile

install: all
	$(INSTALL) -m 0700 -d ~/Colossus
	$(INSTALL) -m 0700 src/colossus ~/Colossus/servicios
	$(TOUCH) ~/Colossus/colossus.conf
	chmod 0600 ~/Colossus/colossus.conf
	$(INSTALL) -m 0700 -d ~/Colossus/modulos
	$(INSTALL) -m 0700 src/modulos/*.so ~/Colossus/modulos
	$(INSTALL) -m 0700 -d ~/Colossus/protocolos
	$(INSTALL) -m 0700 src/protocolos/*.so ~/Colossus/protocolos
	$(INSTALL) -m 0700 -d ~/Colossus/sql
	$(INSTALL) -m 0700 src/sql/*.so ~/Colossus/sql

pem:	src/ssl.cnf
	@echo "Generating certificate request .. "
	$(OPENSSLPATH) req -new \
              -config src/ssl.cnf -out server.req.pem \
              -keyout server.key.pem -nodes
	@echo "Generating self-signed certificate .. "
	$(OPENSSLPATH) req -x509 -days 365 -in server.req.pem \
               -key server.key.pem -out server.cert.pem
	@echo "Generating fingerprint .."
	$(OPENSSLPATH) x509 -subject -dates -fingerprint -noout \
		-in server.cert.pem
	@echo "Setting o-rwx & g-rwx for files... "
	chmod o-rwx server.req.pem server.key.pem server.cert.pem
	chmod g-rwx server.req.pem server.key.pem server.cert.pem
	@echo "Done!. If you want to encrypt the private key, run"
	@echo "make encpem"

encpem: server.key.pem
	@echo "Encrypting server key .."
	$(OPENSSLPATH) rsa -in server.key.pem -out server.key.c.pem -des3
	-@if [ -f server.key.c.pem ] ; then \
		echo "Replacing unencrypted with encrypted .." ; \
		cp server.key.c.pem server.key.pem ; \
		rm -f server.key.c.pem ; \
	fi

